var searchIndex = JSON.parse('{\
"gbmu":{"doc":"","t":"AAFDLLAMAMLALAMLLMLLLFFRRRDRRRRRLLMMMLLLLLLLLLLLLAAAADLMLLMLLMLLLLLLMLLMLMLLLLRRDLLLLOLMLLLLMLLLLRRRRDLLLLLMLMLMMLLLFFRRRRRRRRRRRRRRRRRRRRRRDRRRLLMLMLLLLLLLLMLLLLLLLLLAADNNNENLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLALLLLLLLLLLMLLLLLLLAMLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHENNNNNNNNNNNNNNNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEEEENNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNEDMMLLLLMLLMMMALLLLLMLLMLMLMLLLLLLLLSDSSSLLLLLLMLLLLLLLLLDLLLLMLLLLLLLL","n":["graphics","hardware","main","Graphics","borrow","borrow_mut","controller","cpu","debugger","debugger","from","gui","into","lcd","lcd","new","render","sdl_context","try_from","try_into","type_id","load_rom","toggle_overlay","BTN_HEIGHT","COLOR_BACKGROUND","COLOR_BACKGROUND_BUTTON","Debugger","PRG_HEIGHT","REG_HEIGHT","SCREEN_HEIGHT","SCREEN_WIDTH","SPACE_SZ","borrow","borrow_mut","boxes","buttons","canvas","click","flags","from","get_window_id","instructions","into","new","print_frame","registers","try_from","try_into","type_id","button","joystick","textbox","utils","Button","action","action","activate","active","active","borrow","borrow_mut","centered_text","clone","clone_into","deactivate","draw","from","into","line_height","new","rect","rect","text","text","to_owned","try_from","try_into","type_id","JOYSTICK_TEXTURE_HEIGHT","JOYSTICK_TEXTURE_WIDTH","Joystick","borrow","borrow_mut","draw","from","get_layout","hidden","hidden","hide","into","new","rect","rect","show","try_from","try_into","type_id","COLOR_BACKGROUND","INTERLINE_TEXTBOX","LINE_HEIGHT_TEXTBOX","PADDING_TEXTBOX","TextBox","borrow","borrow_mut","draw","from","get_nb_lines","interline","into","line_height","new","padding","rect","try_from","try_into","type_id","get_font","get_texture_rect","BUTTON_AB_HEIGHT","BUTTON_AB_WIDTH","BUTTON_A_LABEL","BUTTON_A_POS","BUTTON_B_LABEL","BUTTON_B_POS","BUTTON_DIR_HEIGHT","BUTTON_DIR_WIDTH","BUTTON_DOWN_LABEL","BUTTON_DOWN_POS","BUTTON_LEFT_LABEL","BUTTON_LEFT_POS","BUTTON_OPT_HEIGHT","BUTTON_OPT_WIDTH","BUTTON_RIGHT_LABEL","BUTTON_RIGHT_POS","BUTTON_SELECT_LABEL","BUTTON_SELECT_POS","BUTTON_START_LABEL","BUTTON_START_POS","BUTTON_UP_LABEL","BUTTON_UP_POS","Lcd","PIXEL_SIZE","SCREEN_HEIGHT","SCREEN_WIDTH","borrow","borrow_mut","buttons","canvas","canvas","click","from","get_height","get_width","get_window_id","hide_joystick","into","joystick","joystick","keypress","new","print_frame","render_joystick","set_pixel","show_joystick","try_from","try_into","type_id","cpu","memory","Cpu","Halt","Interrupt","Running","State","Stop","adc","add8","add_hl_r16","add_sp_dd","add_u8_to_a","and","bit","borrow","borrow","borrow_mut","borrow_mut","call","ccf","cp","cpl","daa","dec16","dec8","decode","di","disassemble","ei","execute","fetch","fetch","fetch_cb","format_instruction","from","from","get_address","get_operand16","get_operand8","halt","inc16","inc8","instructions","into","into","jp","jr","load16","load8","load8dec","load8inc","load_hl","load_u8","memory","new","nop","or","pop","push","read_imm16","read_imm8","registers","registers","res","ret","reti","rl","rla","rlc","rlca","rr","rrc","rrca","rst","sbc","scf","set","sla","sra","srl","state","step","stop","sub","sub_u8","swap","try_from","try_from","try_into","try_into","type_id","type_id","xor","A","AF","Adc","Adc_a_a","Adc_a_b","Adc_a_c","Adc_a_d","Adc_a_d8","Adc_a_e","Adc_a_h","Adc_a_hl","Adc_a_l","Add8","AddHL_r16","AddSP_dd","Add_a_a","Add_a_b","Add_a_c","Add_a_d","Add_a_d8","Add_a_e","Add_a_h","Add_a_hl","Add_a_l","Add_hl_bc","Add_hl_de","Add_hl_hl","Add_hl_sp","Add_sp_r8","Addr","Addr","Always","And","And_a","And_b","And_c","And_d","And_d8","And_e","And_h","And_hl","And_l","At","B","BC","BC","Bit","Bit","Bit_0_a","Bit_0_b","Bit_0_c","Bit_0_d","Bit_0_e","Bit_0_h","Bit_0_hl","Bit_0_l","Bit_1_a","Bit_1_b","Bit_1_c","Bit_1_d","Bit_1_e","Bit_1_h","Bit_1_hl","Bit_1_l","Bit_2_a","Bit_2_b","Bit_2_c","Bit_2_d","Bit_2_e","Bit_2_h","Bit_2_hl","Bit_2_l","Bit_3_a","Bit_3_b","Bit_3_c","Bit_3_d","Bit_3_e","Bit_3_h","Bit_3_hl","Bit_3_l","Bit_4_a","Bit_4_b","Bit_4_c","Bit_4_d","Bit_4_e","Bit_4_h","Bit_4_hl","Bit_4_l","Bit_5_a","Bit_5_b","Bit_5_c","Bit_5_d","Bit_5_e","Bit_5_h","Bit_5_hl","Bit_5_l","Bit_6_a","Bit_6_b","Bit_6_c","Bit_6_d","Bit_6_e","Bit_6_h","Bit_6_hl","Bit_6_l","Bit_7_a","Bit_7_b","Bit_7_c","Bit_7_d","Bit_7_e","Bit_7_h","Bit_7_hl","Bit_7_l","Byte0","Byte1","Byte2","Byte3","Byte4","Byte5","Byte6","Byte7","C","C","C","Call","Call_a16","Call_c_a16","Call_nc_a16","Call_nz_a16","Call_z_a16","Ccf","Ccf","Clock","Condition","Cp","Cp_a","Cp_b","Cp_c","Cp_d","Cp_d8","Cp_e","Cp_h","Cp_hl","Cp_l","Cpl","Cpl","D","DE","DE","Daa","Daa","Dec16","Dec8","Dec_a","Dec_ahl","Dec_b","Dec_bc","Dec_c","Dec_d","Dec_de","Dec_e","Dec_h","Dec_hl","Dec_l","Dec_sp","Di","Di","E","Ei","Ei","Eight","Eight","Five","Four","Four","H","HL","HL","Halt","Halt","INSTRUCTIONS","Imm","Imm16","Imm16","Imm8","Imm8","Imm8","Inc16","Inc8","Inc_a","Inc_ahl","Inc_b","Inc_bc","Inc_c","Inc_d","Inc_de","Inc_e","Inc_h","Inc_hl","Inc_l","Inc_sp","Instruction","Jp","Jp_a16","Jp_ahl","Jp_c_a16","Jp_nc_a16","Jp_nz_a16","Jp_z_a16","Jr","Jr_c_r8","Jr_nc_r8","Jr_nz_r8","Jr_r8","Jr_z_r8","L","Ld_a16_a","Ld_a16_sp","Ld_a_a","Ld_a_a16","Ld_a_ac","Ld_a_ahl","Ld_a_b","Ld_a_bc","Ld_a_c","Ld_a_d","Ld_a_d8","Ld_a_de","Ld_a_e","Ld_a_h","Ld_a_l","Ld_ac_a","Ld_ahl_d8","Ld_b_a","Ld_b_ahl","Ld_b_b","Ld_b_c","Ld_b_d","Ld_b_d8","Ld_b_e","Ld_b_h","Ld_b_l","Ld_bc_a","Ld_bc_d16","Ld_c_a","Ld_c_ahl","Ld_c_b","Ld_c_c","Ld_c_d","Ld_c_d8","Ld_c_e","Ld_c_h","Ld_c_l","Ld_d_a","Ld_d_ahl","Ld_d_b","Ld_d_c","Ld_d_d","Ld_d_d8","Ld_d_e","Ld_d_h","Ld_d_l","Ld_de_a","Ld_de_d16","Ld_e_a","Ld_e_ahl","Ld_e_b","Ld_e_c","Ld_e_d","Ld_e_d8","Ld_e_e","Ld_e_h","Ld_e_l","Ld_h_a","Ld_h_ahl","Ld_h_b","Ld_h_c","Ld_h_d","Ld_h_d8","Ld_h_e","Ld_h_h","Ld_h_l","Ld_hl_a","Ld_hl_b","Ld_hl_c","Ld_hl_d","Ld_hl_d16","Ld_hl_e","Ld_hl_h","Ld_hl_l","Ld_hl_sp_r8","Ld_l_a","Ld_l_ahl","Ld_l_b","Ld_l_c","Ld_l_d","Ld_l_d8","Ld_l_e","Ld_l_h","Ld_l_l","Ld_sp_d16","Ld_sp_hl","Ldd_a_ahl","Ldd_hl_a","Ldh_a8_a","Ldh_a_a8","Ldi_a_hl","Ldi_hl_a","Load16","Load8","Load8Dec","Load8Inc","LoadHL","NC","NZ","None","Nop","Nop","One","Opcode","Operand16","Operand8","Operation","Or","Or_a","Or_b","Or_c","Or_d","Or_d8","Or_e","Or_h","Or_hl","Or_l","Page0","Pop","Pop_af","Pop_bc","Pop_de","Pop_hl","Push","Push_af","Push_bc","Push_de","Push_hl","Res","Res_1_a","Res_1_b","Res_1_c","Res_1_d","Res_1_e","Res_1_h","Res_1_hl","Res_1_l","Res_2_a","Res_2_b","Res_2_c","Res_2_d","Res_2_e","Res_2_h","Res_2_hl","Res_2_l","Res_3_a","Res_3_b","Res_3_c","Res_3_d","Res_3_e","Res_3_h","Res_3_hl","Res_3_l","Res_4_a","Res_4_b","Res_4_c","Res_4_d","Res_4_e","Res_4_h","Res_4_hl","Res_4_l","Res_5_a","Res_5_b","Res_5_c","Res_5_d","Res_5_e","Res_5_h","Res_5_hl","Res_5_l","Res_6_a","Res_6_b","Res_6_c","Res_6_d","Res_6_e","Res_6_h","Res_6_hl","Res_6_l","Res_7_a","Res_7_b","Res_7_c","Res_7_d","Res_7_e","Res_7_h","Res_7_hl","Res_7_l","Res_a","Res_b","Res_c","Res_d","Res_e","Res_h","Res_hl","Res_l","Ret","Ret","Ret_c","Ret_nc","Ret_nz","Ret_z","Reti","Reti","Rl","Rl_a","Rl_b","Rl_c","Rl_d","Rl_e","Rl_h","Rl_hl","Rl_l","Rla","Rla","Rlc","Rlc_a","Rlc_b","Rlc_c","Rlc_d","Rlc_e","Rlc_h","Rlc_hl","Rlc_l","Rlca","Rlca","Rr","Rr_a","Rr_b","Rr_c","Rr_d","Rr_e","Rr_h","Rr_hl","Rr_l","Rra","Rrc","Rrc_a","Rrc_b","Rrc_c","Rrc_d","Rrc_e","Rrc_h","Rrc_hl","Rrc_l","Rrca","Rrca","Rst","Rst_00h","Rst_08h","Rst_10h","Rst_18h","Rst_20h","Rst_28h","Rst_30h","Rst_38h","SP","Sbc","Sbc_a_a","Sbc_a_b","Sbc_a_c","Sbc_a_d","Sbc_a_d8","Sbc_a_e","Sbc_a_h","Sbc_a_hl","Sbc_a_l","Scf","Scf","Set","Set_0_a","Set_0_b","Set_0_c","Set_0_d","Set_0_e","Set_0_h","Set_0_hl","Set_0_l","Set_1_a","Set_1_b","Set_1_c","Set_1_d","Set_1_e","Set_1_h","Set_1_hl","Set_1_l","Set_2_a","Set_2_b","Set_2_c","Set_2_d","Set_2_e","Set_2_h","Set_2_hl","Set_2_l","Set_3_a","Set_3_b","Set_3_c","Set_3_d","Set_3_e","Set_3_h","Set_3_hl","Set_3_l","Set_4_a","Set_4_b","Set_4_c","Set_4_d","Set_4_e","Set_4_h","Set_4_hl","Set_4_l","Set_5_a","Set_5_b","Set_5_c","Set_5_d","Set_5_e","Set_5_h","Set_5_hl","Set_5_l","Set_6_a","Set_6_b","Set_6_c","Set_6_d","Set_6_e","Set_6_h","Set_6_hl","Set_6_l","Set_7_a","Set_7_b","Set_7_c","Set_7_d","Set_7_e","Set_7_h","Set_7_hl","Set_7_l","Seven","Six","Sixteen","Sixteen","Sla","Sla_a","Sla_b","Sla_c","Sla_d","Sla_e","Sla_h","Sla_hl","Sla_l","Sra","Sra_a","Sra_b","Sra_c","Sra_d","Sra_e","Sra_h","Sra_hl","Sra_l","Srl","Srl_a","Srl_b","Srl_c","Srl_d","Srl_e","Srl_h","Srl_hl","Srl_l","Stop","Stop","Sub","Sub_a","Sub_b","Sub_c","Sub_d","Sub_d8","Sub_e","Sub_h","Sub_hl","Sub_l","Swap","Swap_a","Swap_b","Swap_c","Swap_d","Swap_e","Swap_h","Swap_hl","Swap_l","ThirtyTwo","Three","Twelve","Twenty","TwentyFour","Two","Xor","Xor_a","Xor_b","Xor_c","Xor_d","Xor_d8","Xor_e","Xor_h","Xor_hl","Xor_l","Z","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cycles","eq","eq","eq","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","get_by_opcode","into","into","into","into","into","into","into","into","into","into","into","mnemonic","new","opcode","operand","operation","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AF","BC","DE","HL","Register16","Registers","a","b","borrow","borrow","borrow_mut","borrow_mut","c","clone","clone_into","d","e","f","flags","fmt","fmt","from","from","get_register16","h","into","into","l","new","pc","read16","sp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write16","C","Flags","H","N","Z","bits","borrow","borrow_mut","check_condition","contains","empty","flags","fmt","from","from_bits_truncate","into","set","toggle","try_from","try_into","type_id","Memory","borrow","borrow_mut","from","into","memory","new","read16","read8","try_from","try_into","type_id","write16","write8"],"q":[[0,"gbmu"],[3,"gbmu::graphics"],[21,"gbmu::graphics::controller"],[23,"gbmu::graphics::debugger"],[49,"gbmu::graphics::gui"],[53,"gbmu::graphics::gui::button"],[78,"gbmu::graphics::gui::joystick"],[97,"gbmu::graphics::gui::textbox"],[116,"gbmu::graphics::gui::utils"],[118,"gbmu::graphics::lcd"],[167,"gbmu::hardware"],[169,"gbmu::hardware::cpu"],[261,"gbmu::hardware::cpu::instructions"],[1000,"gbmu::hardware::cpu::registers"],[1040,"gbmu::hardware::cpu::registers::flags"],[1061,"gbmu::hardware::memory"]],"d":["Graphics module include windows, GUI elements and graphics …","","","","","","Controller contains handling function for buttons in the …","","Debugger Window","Debugger Window providing options for the GameBoy emulator","Returns the argument unchanged.","Collection of GUI elements","Calls <code>U::from(self)</code>.","LCD Window","LCD Window rendering GameBoy screen","Create a new Graphics object from a sdl2 context","Render LCD and Debugger Windows, loop and trigger GUI …","Sdl context provide by sdl2","","","","Open a FileDialog then load a Rom into memory","Toggle overlay on the LCD Window","Button height","","","Represent the Debugger window","Program execution TextBox height","Registers TextBox height","Debugger height","Debugger width","Spaces between GUI elements","","","","","","Return a button if exists at a given position","","Returns the argument unchanged.","Get the window id from canvas","","Calls <code>U::from(self)</code>.","Create a new LCD using the sdl_context given","Print the actual frame into the Debugger window","","","","","GUI Button","GUI Joystick","GUI Textbox","Collection of utilitary functions used by GUI elements","Represent a GUI Button","","Action to execute","","","Tell if the button is active or not, could be use in …","","","Tell if the text is centered inside the button","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Text font size","","","<code>sdl2::rect::Rect</code> to locate and draw button","","Text to print inside the button","","","","","","","Represent a GUI Joystick","","","","Returns the argument unchanged.","","","Hide or not the joystick","","Calls <code>U::from(self)</code>.","","","<code>sdl2::rect::Rect</code> containing the joystick’s texture","","","","","","","","","Represent a GUI TextBox","","","","Returns the argument unchanged.","","Interline size in px","Calls <code>U::from(self)</code>.","Font size","","Padding between text and rect","<code>sdl2::rect::Rect</code> to draw textbox","","","","Get gameboy font for GUI elements","Return a sdl2 Rect to scale texture","","","","","","","","","","","","","","","","","","","","","","","Represent the Gameboy LCD window","Ratio used to render the LCD window","LCD height","LCD width","","","","Get canvas","","Return a button if exists at a given position","Returns the argument unchanged.","Get height of the LCD screen","Get width of the LCD screen","Get the window id from canvas","Hide joystick and deactive click on buttons","Calls <code>U::from(self)</code>.","Get joystick","","Return a button if the name is matching","Create a new LCD using the sdl_context given","Print the actual frame into the LCD window","","Set a pixel at position (x, y) to a given color","Show joystick and activate click on buttons","","","","CPU emulation.","","","TODO","TODO","TODO","CPU states","TODO","Adds <em>source</em> and the <code>carry flag</code> to the 8-bit register <code>A</code>, …","Adds <em>source</em> to the 8-bit register <code>A</code>, and stores the result …","Adds <em>source</em> to 16-bit register <code>HL</code>. <code>Flag Register</code> are …","Add to <code>Stack Pointer</code> the 8-bit immediate value. …","Adds <em>data</em> to the 8-bit register <code>A</code> and stores the result …","Performs a bitwise AND operation between the 8-bit …","Copies the bit specified by <em>bit</em> in <em>target</em> to the <code>zero</code> flag.","","","","","If <em>condition</em> is true, pushes <code>Program Counter</code> of the next …","Toggles the <code>carry</code> flag. If <code>carry</code> flag is set, then reset …","Subtracts <em>source</em> from the 8-bit register <code>A</code> without …","Flips all the bits in the 8-bit register <code>A</code>. <code>Flag Register</code> …","The DAA instruction adjusts the result of a binary …","Decrements data represented by <code>target</code> by 1. <code>Flag Register</code> …","Decrements the content of <code>target</code> by 1. <code>Flag Register</code> is …","Returns the <code>Instruction</code> matching <em>opcode</em>. If the opcode …","Disables interrupts","TODO","Enables interrupts","TODO: returns the CPU state","","Returns the Opcode enum matching the opcode read from …","","TODO","Returns the argument unchanged.","Returns the argument unchanged.","Returns the 16-bit data stored at address represented by …","Returns the 16-bit data represented by <em>operand</em>. <code>Operand16</code> …","Returns the 8-bit data represented by <em>operand</em>. <code>Operand8</code> is …","Stops the system clock and enters HALT mode. HALT mode is …","Increments data represented by <code>target</code> by 1. <code>Flag Register</code> …","Increments data represented by <code>target</code> by 1. <code>Flag Register</code> …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loads the value of <em>source</em> to the <code>Program Counter</code> if …","Adds the 8-bit immediate value to the <code>Program Counter</code> if …","Loads the 16-bit <em>source</em> into <em>destination</em>. If <em>destination</em> …","Loads the value represented by <em>source</em> into <em>destination</em>. …","Loads the value of <em>source</em> into <em>destination</em> and decrements …","Loads the value of <em>source</em> into <em>destination</em> and increments …","Loads the sum of <code>SP</code> and the 8-bit immediate value to the …","Loads the 8-bit <em>data</em> into <em>destination</em>. If <em>destination</em> is …","TODO","Initializes CPU with default values","Does nothing.  ","Performs a bitwise operation OR between 8-bit register <code>A</code> …","Pops to the 16-bit register <em>target</em>, 16-bit of data pointed …","Pushes to the stack memory, the 16-bit <em>source</em>. Before and …","Reads from the 16-bit immediate value from <code>Program Counter</code>.","Reads from the 8-bit immediate value from <code>Program Counter</code>. …","General-Purpose registers","General-purpose registers, Program Counter and Stack …","Resets the bit specified by <em>bit</em> in <em>target</em> to 0. …","If <em>condition</em> is true, pops from the memory stack the …","Pops the 16-bit value on the top of memory stack and loads …","Rotates the content of <em>target</em> to the left. <code>Flag Register</code> …","Rotates the content of the 8-bit register <code>A</code> to the left. …","Rotates the content of <em>target</em> to the left. Wraps the …","Rotates the content of the 8-bit register <code>A</code> to the left. …","Rotates the content of <em>target</em> to the right. <code>Flag Register</code> …","Rotates the content of <em>target</em> to the right. Wraps the …","Rotates the content of the 8-bit register <code>A</code> to the right. …","Loads the <code>Program Counter</code> into the memory stack and loads …","Substracts <em>source</em> and the <code>carry</code> flag from the 8-bit …","Sets the <code>carry</code> flag. <code>Flag Register</code> is updated as follows: <code>Z</code>…","Sets the bit specified by <em>bit</em> in <em>target</em> to 1. <code>Flag Register</code>…","Rotates the content of <em>target</em> to the left. Copies bit7 …","Rotates the content of <em>target</em> to the right. Copies bit0 to …","Rotates the content of <em>target</em> to the right. Copies bit0 to …","CPU state","TODO","Stops both the system clock and the oscillator circuit. …","Substracts <em>source</em> from the 8-bit register <code>A</code> and stores the …","Substracts the 8-bit <em>data</em> from the 8-bit register <code>A</code> and …","Swap the lower and higher nibbles of the value represented …","","","","","","","Performs a bitwise operation XOR between 8-bit register <code>A</code> …","The 8-bit register <code>A</code>.  ","The 16-bit register <code>AF</code>.  ","see super::Cpu::adc()","","","","","","","","","","see super::Cpu::add8()","see [super::Cpu::addHL_r16()]","see [super::Cpu::addSP_dd()]","","","","","","","","","","","","","","","The 8-bit value at the address stored in <code>At</code>. See At.","The 16-bit value at the address stored in <code>At</code>. See At.  ","Always is always true  ","see super::Cpu::and()","","","","","","","","","","Enumerates the location where addresses can be stored","The 8-bit register <code>B</code>.","The 16-bit register <code>BC</code>","The 16-bit register <code>BC</code>.  ","Enumerates the bit position in a byte.  ","see super::Cpu::bit()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","C is true when the <em>Carry</em> flag is set  ","The 8-bit register <code>C</code>  ","The 8-bit register <code>C</code>.  ","see super::Cpu::call()","","","","","","see super::Cpu::ccf()","","Enumerates the time it takes to execute an intruction in …","Enumerates the possible conditions for conditional …","see super::Cpu::cp()","","","","","","","","","","see super::Cpu::cpl()","","The 8-bit register <code>D</code>.  ","The 16-bit register <code>DE</code>","The 16-bit register <code>DE</code>.  ","see super::Cpu::daa()","","see super::Cpu::dec16()","see super::Cpu::dec8()","","","","","","","","","","","","","see super::Cpu::di()","","The 8-bit register <code>E</code>.  ","see super::Cpu::ei()","","","8-bit immediate value","The sixth bit","","The fifth bit","The 8-bit register <code>H</code>.  ","The 16-bit register <code>HL</code>","The 16-bit register <code>HL</code>.  ","see super::Cpu::halt()","","A static array of all the instructions in the instructions …","Represents the two possible sizes of immediate operands: …","The 16-bit immediate value","The 16-bit immediate value.  ","The 8-bit immediate value","The 8-bit immediate value.  ","The 8-bit immediate value.  ","see super::Cpu::inc16()","see super::Cpu::inc8()","","","","","","","","","","","","","Describes information about the instruction set","see super::Cpu::jp()","","","","","","","see super::Cpu::jr()","","","","","","The 8-bit register <code>L</code>.  ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","see super::Cpu::load16()","see super::Cpu::load8()","see super::Cpu::load8dec()","see super::Cpu::load8inc()","see [super::Cpu::loadHL()]","NC is true when the <em>Carry</em> flag is not set  ","NZ is true when the <em>Zero</em> flag is not set  ","","see super::Cpu::nop()","","The second bit","Enumerates all the GameBoy opcodes both regular and …","Enumerates the operands for 16-bit instructions.  ","Enumerates the operands for 8-bit instructions.  ","Enumerates all the operations representend by …","see super::Cpu::or()","","","","","","","","","","","see super::Cpu::pop()","","","","","see super::Cpu::push()","","","","","see super::Cpu::res()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","see super::Cpu::ret()","","","","","","see super::Cpu::reti()","","see super::Cpu::rl()","","","","","","","","","see super::Cpu::rla()","","see super::Cpu::rlc()","","","","","","","","","see super::Cpu::rlca()","","see super::Cpu::rr()","","","","","","","","","","see super::Cpu::rrc()","","","","","","","","","see super::Cpu::rrca()","","see super::Cpu::rst()","","","","","","","","","The 16-bit <code>Stack Pointer</code>.  ","see super::Cpu::sbc()","","","","","","","","","","see super::Cpu::scf()","","see super::Cpu::set()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The eighth bit","The seventh bit","","16-bit immediate value","see super::Cpu::sla()","","","","","","","","","see super::Cpu::sra()","","","","","","","","","see super::Cpu::srl()","","","","","","","","","see super::Cpu::stop()","","see super::Cpu::sub()","","","","","","","","","","see super::Cpu::swap()","","","","","","","","","","The fourth bit  ","","","","The third bit","see super::Cpu::xor()","","","","","","","","","","Z is true when the <em>Zero</em> flag is set  ","The first bit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A list of clock cycles associated with the instruction. …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the instruction with a matching opcode","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The instruction’s mnemonic (e.g “LD A, B”). In the …","Creates an Instruction struct with values given as …","An Opcode variant representing the instruction.  ","An optional variable to inform whether the instruction has …","An Operation variant to represent the instruction’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The 16-bit register <code>AF</code> pairs the 8-bit register <code>A</code> as it …","The 16-bit register <code>BC</code> pairs the 8-bit register <code>B</code> as it …","The 16-bit register <code>DE</code> pairs the 8-bit register <code>D</code> as it …","The 16-bit register <code>HL</code> pairs the 8-bit register <code>H</code> as it …","Enumerates the 4 possible pairing of 16-bit registers","The CPU registers.  ","The 8-bit register <code>A</code> (Accumulator) stores data and the …","The 8-bit auxiliary register <code>B</code>.  ","","","","","The 8-bit auxiliary register <code>C</code>.  ","","","The 8-bit auxiliary register <code>D</code>.  ","The 8-bit auxiliary register <code>E</code>.  ","The <code>Flag Register</code> stores four flags that are set and reset …","<code>Flag Register</code> F.","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the <em>operand</em> variant into its <code>Register16</code> …","The 8-bit auxiliary register <code>H</code>.  ","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The 8-bit auxiliary register <code>L</code>.  ","Constructs empty registers.  ","The 16-bit register <code>Program Counter</code> holds the address data …","Reads the 16-bit value of <em>r16</em> from the values stored in …","The 16-bit register <code>Stack Pointer</code> holds the starting …","","","","","","","","Writes the 16-bit value <em>data</em> into <em>r16</em>. The first 8-bit …","The position of the <em>Carry</em> flag in the 8-bit register. Set …","","The position of the <em>Half-Carry</em> flag in the 8-bit register. …","The position of the <em>Subtract</em> flag in the 8-bit register. …","The position of the <em>Zero</em> flag in the 8-bit register. Set …","Returns <code>Flag Register</code> as u8.  ","","","Returns true when the flag status matches the condition, …","Returns true if <em>flag</em> is set in the <code>Flag Register</code>.","Constructs an empty <code>Flag Register</code>.  ","","","Returns the argument unchanged.","Creates a <code>Flag Register</code> from <em>flags</em>, truncating the lowest …","Calls <code>U::from(self)</code>.","If <em>set</em> is true, sets <em>flag</em> into the <code>Flag Register</code>, …","Toggles the value of <em>flag</em> in the <code>Flag Register</code>.  ","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Reads the 16-bit value at address pc Returns a native …","Reads the 8-bit value at address pc","","","","Write at address pc the u16 value converted into little …","Writes at address pc the u8 value given as parameter"],"i":[0,0,0,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,18,18,18,18,0,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,43,43,43,0,43,23,23,23,23,23,23,23,23,43,23,43,23,23,23,23,23,23,23,23,23,23,23,23,0,23,23,23,23,43,23,23,23,23,23,23,0,23,43,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,43,23,43,23,43,23,24,25,37,29,29,29,29,29,29,29,29,29,37,37,37,29,29,29,29,29,29,29,29,29,29,29,29,29,29,24,25,28,37,29,29,29,29,29,29,29,29,29,0,24,33,25,0,37,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,35,35,35,35,35,35,35,35,28,33,24,37,29,29,29,29,29,37,29,0,0,37,29,29,29,29,29,29,29,29,29,37,29,24,33,25,37,29,37,37,29,29,29,29,29,29,29,29,29,29,29,29,37,29,24,37,29,36,32,27,36,27,24,33,25,37,29,0,0,33,25,33,24,25,37,37,29,29,29,29,29,29,29,29,29,29,29,29,0,37,29,29,29,29,29,29,37,29,29,29,29,29,24,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,37,37,37,37,37,28,28,36,37,29,27,0,0,0,0,37,29,29,29,29,29,29,29,29,29,0,37,29,29,29,29,37,29,29,29,29,37,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,37,29,29,29,29,29,37,29,37,29,29,29,29,29,29,29,29,37,29,37,29,29,29,29,29,29,29,29,37,29,37,29,29,29,29,29,29,29,29,29,37,29,29,29,29,29,29,29,29,37,29,37,29,29,29,29,29,29,29,29,25,37,29,29,29,29,29,29,29,29,29,37,29,37,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,27,27,36,32,37,29,29,29,29,29,29,29,29,37,29,29,29,29,29,29,29,29,37,29,29,29,29,29,29,29,29,37,29,37,29,29,29,29,29,29,29,29,29,37,29,29,29,29,29,29,29,29,36,27,36,36,36,27,37,29,29,29,29,29,29,29,29,29,28,27,30,36,35,32,28,33,24,25,27,37,29,30,36,35,32,28,33,24,25,27,37,29,30,36,35,32,28,33,24,25,27,37,29,30,36,35,32,28,33,24,25,27,37,29,30,32,28,33,24,25,29,30,36,35,32,28,33,24,25,27,37,29,30,30,36,35,32,28,33,24,25,27,37,29,30,30,30,30,30,30,36,35,32,28,33,24,25,27,37,29,30,36,35,32,28,33,24,25,27,37,29,30,36,35,32,28,33,24,25,27,37,29,30,36,35,32,28,33,24,25,27,37,29,38,38,38,38,0,0,39,39,39,38,39,38,39,38,38,39,39,39,0,39,38,39,38,39,39,39,38,39,39,39,39,39,38,39,38,39,38,39,38,39,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,34,34,34,34,34,34,34,34,34,34,34,34,34],"f":[0,0,[[]],0,[[]],[[]],0,0,0,0,[[]],0,[[]],0,0,[[],1],[1],0,[[],2],[[],2],[[],3],[1],[1],0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,[[4,5,5],[[7,[6]]]],[4,8],[[]],[4,9],[4,8],[[]],[[10,5,5],4],[[4,[12,[11]],[12,[11]],[12,[11]]]],[4,8],[[],2],[[],2],[[],3],0,0,0,0,0,[[6,1]],0,[6],[6,13],0,[[]],[[]],0,[6,6],[[]],[6],[[6,[15,[14]],[7,[16]],16],[[2,[11]]]],[[]],[[]],0,[[9,9,9,11,13,7],6],[6,17],0,[6,11],0,[[]],[[],2],[[],2],[[],3],0,0,0,[[]],[[]],[[18,[15,[14]]],[[2,[11]]]],[[]],0,[18,13],0,[18],[[]],[[[15,[14]]],18],[18,17],0,[18],[[],2],[[],2],[[],3],0,0,0,0,0,[[]],[[]],[[8,[15,[14]],[12,[19]]],[[2,[11]]]],[[]],[8,9],0,[[]],0,[[5,5,9,9],8],0,0,[[],2],[[],2],[[],3],[20,[[2,[21,11]]]],[[9,9,9,9,13],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[22,[[15,[14]]]],0,[[22,5,5],[[7,[6]]]],[[]],[22,9],[22,9],[22,9],[22],[[]],[22,18],0,[[22,11],[[7,[6]]]],[10,22],[22],[22],[[22,9,9,16]],[22],[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,[[23,24]],[[23,24]],[[23,25]],[23],[[23,26]],[[23,24]],[[23,27,24]],[[]],[[]],[[]],[[]],[[23,28,25]],[23],[[23,24]],[23],[23],[[23,25]],[[23,24]],[29,30],[23],[[23,31,31],[[12,[11]]]],[23],[[23,30]],0,[[23,31],[[2,[11]]]],[[23,31],29],[[23,32,19,31]],[[]],[[]],[[23,33],31],[[23,25],31],[[23,24],26],[23],[[23,25]],[[23,24]],0,[[]],[[]],[[23,28,25]],[[23,28]],[[23,25,25]],[[23,24,24]],[[23,24,24]],[[23,24,24]],[23],[[23,24,26]],0,[34,23],[23],[[23,24]],[[23,25]],[[23,25]],[23,31],[23,26],0,0,[[23,27,24]],[[23,28]],[23],[[23,24]],[23],[[23,24]],[23],[[23,24]],[[23,24]],[23],[[23,35]],[[23,24]],[23],[[23,27,24]],[[23,24]],[[23,24]],[[23,24]],0,[23],[23],[[23,24]],[[23,26],26],[[23,24]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[23,24]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,30],[36,36],[35,35],[32,32],[28,28],[33,33],[24,24],[25,25],[27,27],[37,37],[29,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[32,32],13],[[28,28],13],[[33,33],13],[[24,24],13],[[25,25],13],[[29,29],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,[[7,[30]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[29,19,[7,[32]],37],30],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[38,38],[[]],0,0,0,0,[[39,40],41],[[38,40],41],[[]],[[]],[25,38],0,[[]],[[]],0,[[],39],0,[[39,38],31],0,[[]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[39,38,31]],0,0,0,0,0,[42,26],[[]],[[]],[[42,28],13],[[42,26],13],[[],42],0,[[42,40],41],[[]],[26,42],[[]],[[42,26,13]],[[42,26]],[[],2],[[],2],[[],3],0,[[]],[[]],[[]],[[]],0,[[[12,[26]]],34],[[34,31],31],[[34,31],26],[[],2],[[],2],[[],3],[[34,31,31]],[[34,31,26]]],"c":[],"p":[[3,"Graphics"],[4,"Result"],[3,"TypeId"],[3,"Debugger"],[15,"i32"],[3,"Button"],[4,"Option"],[3,"TextBox"],[15,"u32"],[3,"Sdl"],[3,"String"],[3,"Vec"],[15,"bool"],[3,"Window"],[3,"Canvas"],[3,"Color"],[3,"Rect"],[3,"Joystick"],[15,"str"],[3,"Sdl2TtfContext"],[3,"Font"],[3,"Lcd"],[3,"Cpu"],[4,"Operand8"],[4,"Operand16"],[15,"u8"],[4,"Bit"],[4,"Condition"],[4,"Opcode"],[3,"Instruction"],[15,"u16"],[4,"Imm"],[4,"At"],[3,"Memory"],[4,"Page0"],[4,"Clock"],[4,"Operation"],[4,"Register16"],[3,"Registers"],[3,"Formatter"],[6,"Result"],[3,"Flags"],[4,"State"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
