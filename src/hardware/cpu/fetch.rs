use super::instructions::Opcode;
use crate::Cpu;

impl Cpu {
    /// Returns the Opcode enum matching the opcode read from memory
    /// If the opcode is 0xCB, the next byte is matched against CB-prefixed opcodes
    pub fn fetch(&self, address: u16) -> Result<(Opcode, u16), (String, u16)> {
        let byte = self.memory.read8(address);

        if byte == 0xCB {
            return self.fetch_cb(address + 1);
        }

        let opcode = match byte {
            0x00 => Opcode::Nop,
            0x01 => Opcode::Ld_bc_d16,
            0x02 => Opcode::Ld_bc_a,
            0x03 => Opcode::Inc_bc,
            0x04 => Opcode::Inc_b,
            0x05 => Opcode::Dec_b,
            0x06 => Opcode::Ld_b_d8,
            0x07 => Opcode::Rlca,
            0x08 => Opcode::Ld_a16_sp,
            0x09 => Opcode::Add_hl_bc,
            0x0A => Opcode::Ld_a_bc,
            0x0B => Opcode::Dec_bc,
            0x0C => Opcode::Inc_c,
            0x0D => Opcode::Dec_c,
            0x0E => Opcode::Ld_c_d8,
            0x0F => Opcode::Rrca,

            0x10 => Opcode::Stop,
            0x11 => Opcode::Ld_de_d16,
            0x12 => Opcode::Ld_de_a,
            0x13 => Opcode::Inc_de,
            0x14 => Opcode::Inc_d,
            0x15 => Opcode::Dec_d,
            0x16 => Opcode::Ld_d_d8,
            0x17 => Opcode::Rla,
            0x18 => Opcode::Jr_r8,
            0x19 => Opcode::Add_hl_de,
            0x1A => Opcode::Ld_a_de,
            0x1B => Opcode::Dec_de,
            0x1C => Opcode::Inc_e,
            0x1D => Opcode::Dec_e,
            0x1E => Opcode::Ld_e_d8,
            0x1F => Opcode::Rra,

            0x20 => Opcode::Jr_nz_r8,
            0x21 => Opcode::Ld_hl_d16,
            0x22 => Opcode::Ld_hl_a,
            0x23 => Opcode::Inc_hl,
            0x24 => Opcode::Inc_h,
            0x25 => Opcode::Dec_h,
            0x26 => Opcode::Ld_h_d8,
            0x27 => Opcode::Daa,
            0x28 => Opcode::Jr_z_r8,
            0x29 => Opcode::Add_hl_hl,
            0x2A => Opcode::Ldi_a_hl,
            0x2B => Opcode::Dec_hl,
            0x2C => Opcode::Inc_l,
            0x2D => Opcode::Dec_l,
            0x2E => Opcode::Ld_l_d8,
            0x2F => Opcode::Cpl,

            0x30 => Opcode::Jr_nc_r8,
            0x31 => Opcode::Ld_sp_d16,
            0x32 => Opcode::Ldd_hl_a,
            0x33 => Opcode::Inc_sp,
            0x34 => Opcode::Inc_ahl,
            0x35 => Opcode::Dec_ahl,
            0x36 => Opcode::Ld_ahl_d8,
            0x37 => Opcode::Scf,
            0x38 => Opcode::Jr_c_r8,
            0x39 => Opcode::Add_hl_sp,
            0x3A => Opcode::Ldd_a_ahl,
            0x3B => Opcode::Dec_sp,
            0x3C => Opcode::Inc_a,
            0x3D => Opcode::Dec_a,
            0x3E => Opcode::Ld_a_d8,
            0x3F => Opcode::Ccf,

            0x40 => Opcode::Ld_b_b,
            0x41 => Opcode::Ld_b_c,
            0x42 => Opcode::Ld_b_d,
            0x43 => Opcode::Ld_b_e,
            0x44 => Opcode::Ld_b_h,
            0x45 => Opcode::Ld_b_l,
            0x46 => Opcode::Ld_b_ahl,
            0x47 => Opcode::Ld_b_a,
            0x48 => Opcode::Ld_c_b,
            0x49 => Opcode::Ld_c_c,
            0x4A => Opcode::Ld_c_d,
            0x4B => Opcode::Ld_c_e,
            0x4C => Opcode::Ld_c_h,
            0x4D => Opcode::Ld_c_l,
            0x4E => Opcode::Ld_c_ahl,
            0x4F => Opcode::Ld_c_a,

            0x50 => Opcode::Ld_d_b,
            0x51 => Opcode::Ld_d_c,
            0x52 => Opcode::Ld_d_d,
            0x53 => Opcode::Ld_d_e,
            0x54 => Opcode::Ld_d_h,
            0x55 => Opcode::Ld_d_l,
            0x56 => Opcode::Ld_d_ahl,
            0x57 => Opcode::Ld_d_a,
            0x58 => Opcode::Ld_e_b,
            0x59 => Opcode::Ld_e_c,
            0x5A => Opcode::Ld_e_d,
            0x5B => Opcode::Ld_e_e,
            0x5C => Opcode::Ld_e_h,
            0x5D => Opcode::Ld_e_l,
            0x5E => Opcode::Ld_e_ahl,
            0x5F => Opcode::Ld_e_a,

            0x60 => Opcode::Ld_h_b,
            0x61 => Opcode::Ld_h_c,
            0x62 => Opcode::Ld_h_d,
            0x63 => Opcode::Ld_h_e,
            0x64 => Opcode::Ld_h_h,
            0x65 => Opcode::Ld_h_l,
            0x66 => Opcode::Ld_h_ahl,
            0x67 => Opcode::Ld_h_a,
            0x68 => Opcode::Ld_l_b,
            0x69 => Opcode::Ld_l_c,
            0x6A => Opcode::Ld_l_d,
            0x6B => Opcode::Ld_l_e,
            0x6C => Opcode::Ld_l_h,
            0x6D => Opcode::Ld_l_l,
            0x6E => Opcode::Ld_l_ahl,
            0x6F => Opcode::Ld_l_a,

            0x70 => Opcode::Ld_hl_b,
            0x71 => Opcode::Ld_hl_c,
            0x72 => Opcode::Ld_hl_d,
            0x73 => Opcode::Ld_hl_e,
            0x74 => Opcode::Ld_hl_h,
            0x75 => Opcode::Ld_hl_l,
            0x76 => Opcode::Halt,
            0x77 => Opcode::Ld_hl_a,
            0x78 => Opcode::Ld_a_b,
            0x79 => Opcode::Ld_a_c,
            0x7A => Opcode::Ld_a_d,
            0x7B => Opcode::Ld_a_e,
            0x7C => Opcode::Ld_a_h,
            0x7D => Opcode::Ld_a_l,
            0x7E => Opcode::Ld_a_ahl,
            0x7F => Opcode::Ld_a_a,

            0x80 => Opcode::Add_a_b,
            0x81 => Opcode::Add_a_c,
            0x82 => Opcode::Add_a_d,
            0x83 => Opcode::Add_a_e,
            0x84 => Opcode::Add_a_h,
            0x85 => Opcode::Add_a_l,
            0x86 => Opcode::Add_a_hl,
            0x87 => Opcode::Add_a_a,
            0x88 => Opcode::Adc_a_b,
            0x89 => Opcode::Adc_a_c,
            0x8A => Opcode::Adc_a_d,
            0x8B => Opcode::Adc_a_e,
            0x8C => Opcode::Adc_a_h,
            0x8D => Opcode::Adc_a_l,
            0x8E => Opcode::Adc_a_hl,
            0x8F => Opcode::Adc_a_a,

            0x90 => Opcode::Sub_b,
            0x91 => Opcode::Sub_c,
            0x92 => Opcode::Sub_d,
            0x93 => Opcode::Sub_e,
            0x94 => Opcode::Sub_h,
            0x95 => Opcode::Sub_l,
            0x96 => Opcode::Sub_hl,
            0x97 => Opcode::Sub_a,
            0x98 => Opcode::Sbc_a_b,
            0x99 => Opcode::Sbc_a_c,
            0x9A => Opcode::Sbc_a_d,
            0x9B => Opcode::Sbc_a_e,
            0x9C => Opcode::Sbc_a_h,
            0x9D => Opcode::Sbc_a_l,
            0x9E => Opcode::Sbc_a_hl,
            0x9F => Opcode::Sbc_a_a,

            0xA0 => Opcode::And_b,
            0xA1 => Opcode::And_c,
            0xA2 => Opcode::And_d,
            0xA3 => Opcode::And_e,
            0xA4 => Opcode::And_h,
            0xA5 => Opcode::And_l,
            0xA6 => Opcode::And_hl,
            0xA7 => Opcode::And_a,
            0xA8 => Opcode::Xor_b,
            0xA9 => Opcode::Xor_c,
            0xAA => Opcode::Xor_d,
            0xAB => Opcode::Xor_e,
            0xAC => Opcode::Xor_h,
            0xAD => Opcode::Xor_l,
            0xAE => Opcode::Xor_hl,
            0xAF => Opcode::Xor_a,

            0xB0 => Opcode::Or_b,
            0xB1 => Opcode::Or_c,
            0xB2 => Opcode::Or_d,
            0xB3 => Opcode::Or_e,
            0xB4 => Opcode::Or_h,
            0xB5 => Opcode::Or_l,
            0xB6 => Opcode::Or_hl,
            0xB7 => Opcode::Or_a,
            0xB8 => Opcode::Cp_b,
            0xB9 => Opcode::Cp_c,
            0xBA => Opcode::Cp_d,
            0xBB => Opcode::Cp_e,
            0xBC => Opcode::Cp_h,
            0xBD => Opcode::Cp_l,
            0xBE => Opcode::Cp_hl,
            0xBF => Opcode::Cp_a,

            0xC0 => Opcode::Ret_nz,
            0xC1 => Opcode::Pop_bc,
            0xC2 => Opcode::Jp_nz_a16,
            0xC3 => Opcode::Jp_a16,
            0xC4 => Opcode::Call_nz_a16,
            0xC5 => Opcode::Push_bc,
            0xC6 => Opcode::Add_a_d8,
            0xC7 => Opcode::Rst_00h,
            0xC8 => Opcode::Ret_z,
            0xC9 => Opcode::Ret,
            0xCA => Opcode::Jp_z_a16,
            0xCC => Opcode::Call_z_a16,
            0xCD => Opcode::Call_a16,
            0xCE => Opcode::Adc_a_d8,
            0xCF => Opcode::Rst_08h,

            0xD0 => Opcode::Ret_nc,
            0xD1 => Opcode::Pop_de,
            0xD2 => Opcode::Jp_nc_a16,
            0xD4 => Opcode::Call_nc_a16,
            0xD5 => Opcode::Push_de,
            0xD6 => Opcode::Sub_d8,
            0xD7 => Opcode::Rst_10h,
            0xD8 => Opcode::Ret_c,
            0xD9 => Opcode::Reti,
            0xDA => Opcode::Jp_c_a16,
            0xDC => Opcode::Call_c_a16,
            0xDE => Opcode::Sbc_a_d8,
            0xDF => Opcode::Rst_18h,

            0xE0 => Opcode::Ldh_a8_a,
            0xE1 => Opcode::Pop_hl,
            0xE2 => Opcode::Ld_ac_a,
            0xE5 => Opcode::Push_hl,
            0xE6 => Opcode::And_d8,
            0xE7 => Opcode::Rst_20h,
            0xE8 => Opcode::Add_sp_r8,
            0xE9 => Opcode::Jp_ahl,
            0xEA => Opcode::Ld_a16_a,
            0xEE => Opcode::Xor_d8,
            0xEF => Opcode::Rst_28h,

            0xF0 => Opcode::Ldh_a_a8,
            0xF1 => Opcode::Pop_af,
            0xF2 => Opcode::Ld_a_ac,
            0xF3 => Opcode::Di,
            0xF5 => Opcode::Push_af,
            0xF6 => Opcode::Or_d8,
            0xF7 => Opcode::Rst_30h,
            0xF8 => Opcode::Ld_hl_sp_r8,
            0xF9 => Opcode::Ld_sp_hl,
            0xFA => Opcode::Ld_a_a16,
            0xFB => Opcode::Ei,
            0xFE => Opcode::Cp_d8,
            0xFF => Opcode::Rst_38h,
            _ => {
                return Err((
                    format!("value not part of the instruction set: {:#x}", byte),
                    1,
                ))
            }
        };
        Ok((opcode, 1))
    }

    fn fetch_cb(&self, address: u16) -> Result<(Opcode, u16), (String, u16)> {
        let byte = self.memory.read8(address);
        let opcode = match byte {
            0x00 => Opcode::Rlc_b,
            0x01 => Opcode::Rlc_c,
            0x02 => Opcode::Rlc_d,
            0x03 => Opcode::Rlc_e,
            0x04 => Opcode::Rlc_h,
            0x05 => Opcode::Rlc_l,
            0x06 => Opcode::Rlc_hl,
            0x07 => Opcode::Rlc_a,
            0x08 => Opcode::Rrc_b,
            0x09 => Opcode::Rrc_c,
            0x0A => Opcode::Rrc_d,
            0x0B => Opcode::Rrc_e,
            0x0C => Opcode::Rrc_h,
            0x0D => Opcode::Rrc_l,
            0x0E => Opcode::Rrc_hl,
            0x0F => Opcode::Rrc_a,
            0x10 => Opcode::Rl_b,
            0x11 => Opcode::Rl_c,
            0x12 => Opcode::Rl_d,
            0x13 => Opcode::Rl_e,
            0x14 => Opcode::Rl_h,
            0x15 => Opcode::Rl_l,
            0x16 => Opcode::Rl_hl,
            0x17 => Opcode::Rl_a,
            0x18 => Opcode::Rr_b,
            0x19 => Opcode::Rr_c,
            0x1A => Opcode::Rr_d,
            0x1B => Opcode::Rr_e,
            0x1C => Opcode::Rr_h,
            0x1D => Opcode::Rr_l,
            0x1E => Opcode::Rr_hl,
            0x1F => Opcode::Rr_a,
            0x20 => Opcode::Sla_b,
            0x21 => Opcode::Sla_c,
            0x22 => Opcode::Sla_d,
            0x23 => Opcode::Sla_e,
            0x24 => Opcode::Sla_h,
            0x25 => Opcode::Sla_l,
            0x26 => Opcode::Sla_hl,
            0x27 => Opcode::Sla_a,
            0x28 => Opcode::Sra_b,
            0x29 => Opcode::Sra_c,
            0x2A => Opcode::Sra_d,
            0x2B => Opcode::Sra_e,
            0x2C => Opcode::Sra_h,
            0x2D => Opcode::Sra_l,
            0x2E => Opcode::Sra_hl,
            0x2F => Opcode::Sra_a,
            0x30 => Opcode::Swap_b,
            0x31 => Opcode::Swap_c,
            0x32 => Opcode::Swap_d,
            0x33 => Opcode::Swap_e,
            0x34 => Opcode::Swap_h,
            0x35 => Opcode::Swap_l,
            0x36 => Opcode::Swap_hl,
            0x37 => Opcode::Swap_a,
            0x38 => Opcode::Srl_b,
            0x39 => Opcode::Srl_c,
            0x3A => Opcode::Srl_d,
            0x3B => Opcode::Srl_e,
            0x3C => Opcode::Srl_h,
            0x3D => Opcode::Srl_l,
            0x3E => Opcode::Srl_hl,
            0x3F => Opcode::Srl_a,

            0x40 => Opcode::Bit_0_b,
            0x41 => Opcode::Bit_0_c,
            0x42 => Opcode::Bit_0_d,
            0x43 => Opcode::Bit_0_e,
            0x44 => Opcode::Bit_0_h,
            0x45 => Opcode::Bit_0_l,
            0x46 => Opcode::Bit_0_hl,
            0x47 => Opcode::Bit_0_a,

            0x48 => Opcode::Bit_1_b,
            0x49 => Opcode::Bit_1_c,
            0x4A => Opcode::Bit_1_d,
            0x4B => Opcode::Bit_1_e,
            0x4C => Opcode::Bit_1_h,
            0x4D => Opcode::Bit_1_l,
            0x4E => Opcode::Bit_1_hl,
            0x4F => Opcode::Bit_1_a,

            0x50 => Opcode::Bit_2_b,
            0x51 => Opcode::Bit_2_c,
            0x52 => Opcode::Bit_2_d,
            0x53 => Opcode::Bit_2_e,
            0x54 => Opcode::Bit_2_h,
            0x55 => Opcode::Bit_2_l,
            0x56 => Opcode::Bit_2_hl,
            0x57 => Opcode::Bit_2_a,
            0x58 => Opcode::Bit_3_b,
            0x59 => Opcode::Bit_3_c,
            0x5A => Opcode::Bit_3_d,
            0x5B => Opcode::Bit_3_e,
            0x5C => Opcode::Bit_3_h,
            0x5D => Opcode::Bit_3_l,
            0x5E => Opcode::Bit_3_hl,
            0x5F => Opcode::Bit_3_a,

            0x60 => Opcode::Bit_4_b,
            0x61 => Opcode::Bit_4_c,
            0x62 => Opcode::Bit_4_d,
            0x63 => Opcode::Bit_4_e,
            0x64 => Opcode::Bit_4_h,
            0x65 => Opcode::Bit_4_l,
            0x66 => Opcode::Bit_4_hl,
            0x67 => Opcode::Bit_4_a,
            0x68 => Opcode::Bit_5_b,
            0x69 => Opcode::Bit_5_c,
            0x6A => Opcode::Bit_5_d,
            0x6B => Opcode::Bit_5_e,
            0x6C => Opcode::Bit_5_h,
            0x6D => Opcode::Bit_5_l,
            0x6E => Opcode::Bit_5_hl,
            0x6F => Opcode::Bit_5_a,

            0x70 => Opcode::Bit_6_b,
            0x71 => Opcode::Bit_6_c,
            0x72 => Opcode::Bit_6_d,
            0x73 => Opcode::Bit_6_e,
            0x74 => Opcode::Bit_6_h,
            0x75 => Opcode::Bit_6_l,
            0x76 => Opcode::Bit_6_hl,
            0x77 => Opcode::Bit_6_a,
            0x78 => Opcode::Bit_7_b,
            0x79 => Opcode::Bit_7_c,
            0x7A => Opcode::Bit_7_d,
            0x7B => Opcode::Bit_7_e,
            0x7C => Opcode::Bit_7_h,
            0x7D => Opcode::Bit_7_l,
            0x7E => Opcode::Bit_7_hl,
            0x7F => Opcode::Bit_7_a,

            0x80 => Opcode::Res_b,
            0x81 => Opcode::Res_c,
            0x82 => Opcode::Res_d,
            0x83 => Opcode::Res_e,
            0x84 => Opcode::Res_h,
            0x85 => Opcode::Res_l,
            0x86 => Opcode::Res_hl,
            0x87 => Opcode::Res_a,
            0x88 => Opcode::Res_1_b,
            0x89 => Opcode::Res_1_c,
            0x8A => Opcode::Res_1_d,
            0x8B => Opcode::Res_1_e,
            0x8C => Opcode::Res_1_h,
            0x8D => Opcode::Res_1_l,
            0x8E => Opcode::Res_1_hl,
            0x8F => Opcode::Res_1_a,

            0x90 => Opcode::Res_2_b,
            0x91 => Opcode::Res_2_c,
            0x92 => Opcode::Res_2_d,
            0x93 => Opcode::Res_2_e,
            0x94 => Opcode::Res_2_h,
            0x95 => Opcode::Res_2_l,
            0x96 => Opcode::Res_2_hl,
            0x97 => Opcode::Res_2_a,
            0x98 => Opcode::Res_3_b,
            0x99 => Opcode::Res_3_c,
            0x9A => Opcode::Res_3_d,
            0x9B => Opcode::Res_3_e,
            0x9C => Opcode::Res_3_h,
            0x9D => Opcode::Res_3_l,
            0x9E => Opcode::Res_3_hl,
            0x9F => Opcode::Res_3_a,

            0xA0 => Opcode::Res_4_b,
            0xA1 => Opcode::Res_4_c,
            0xA2 => Opcode::Res_4_d,
            0xA3 => Opcode::Res_4_e,
            0xA4 => Opcode::Res_4_h,
            0xA5 => Opcode::Res_4_l,
            0xA6 => Opcode::Res_4_hl,
            0xA7 => Opcode::Res_4_a,
            0xA8 => Opcode::Res_5_b,
            0xA9 => Opcode::Res_5_c,
            0xAA => Opcode::Res_5_d,
            0xAB => Opcode::Res_5_e,
            0xAC => Opcode::Res_5_h,
            0xAD => Opcode::Res_5_l,
            0xAE => Opcode::Res_5_hl,
            0xAF => Opcode::Res_5_a,

            0xB0 => Opcode::Res_6_b,
            0xB1 => Opcode::Res_6_c,
            0xB2 => Opcode::Res_6_d,
            0xB3 => Opcode::Res_6_e,
            0xB4 => Opcode::Res_6_h,
            0xB5 => Opcode::Res_6_l,
            0xB6 => Opcode::Res_6_hl,
            0xB7 => Opcode::Res_6_a,
            0xB8 => Opcode::Res_7_b,
            0xB9 => Opcode::Res_7_c,
            0xBA => Opcode::Res_7_d,
            0xBB => Opcode::Res_7_e,
            0xBC => Opcode::Res_7_h,
            0xBD => Opcode::Res_7_l,
            0xBE => Opcode::Res_7_hl,
            0xBF => Opcode::Res_7_a,

            0xC0 => Opcode::Set_0_b,
            0xC1 => Opcode::Set_0_c,
            0xC2 => Opcode::Set_0_d,
            0xC3 => Opcode::Set_0_e,
            0xC4 => Opcode::Set_0_h,
            0xC5 => Opcode::Set_0_l,
            0xC6 => Opcode::Set_0_hl,
            0xC7 => Opcode::Set_0_a,
            0xC8 => Opcode::Set_1_b,
            0xC9 => Opcode::Set_1_c,
            0xCA => Opcode::Set_1_d,
            0xCB => Opcode::Set_1_e,
            0xCC => Opcode::Set_1_h,
            0xCD => Opcode::Set_1_l,
            0xCE => Opcode::Set_1_hl,
            0xCF => Opcode::Set_1_a,

            0xD0 => Opcode::Set_2_b,
            0xD1 => Opcode::Set_2_c,
            0xD2 => Opcode::Set_2_d,
            0xD3 => Opcode::Set_2_e,
            0xD4 => Opcode::Set_2_h,
            0xD5 => Opcode::Set_2_l,
            0xD6 => Opcode::Set_2_hl,
            0xD7 => Opcode::Set_2_a,
            0xD8 => Opcode::Set_3_b,
            0xD9 => Opcode::Set_3_c,
            0xDA => Opcode::Set_3_d,
            0xDB => Opcode::Set_3_e,
            0xDC => Opcode::Set_3_h,
            0xDD => Opcode::Set_3_l,
            0xDE => Opcode::Set_3_hl,
            0xDF => Opcode::Set_3_a,

            0xE0 => Opcode::Set_4_b,
            0xE1 => Opcode::Set_4_c,
            0xE2 => Opcode::Set_4_d,
            0xE3 => Opcode::Set_4_e,
            0xE4 => Opcode::Set_4_h,
            0xE5 => Opcode::Set_4_l,
            0xE6 => Opcode::Set_4_hl,
            0xE7 => Opcode::Set_4_a,
            0xE8 => Opcode::Set_5_b,
            0xE9 => Opcode::Set_5_c,
            0xEA => Opcode::Set_5_d,
            0xEB => Opcode::Set_5_e,
            0xEC => Opcode::Set_5_h,
            0xED => Opcode::Set_5_l,
            0xEE => Opcode::Set_5_hl,
            0xEF => Opcode::Set_5_a,

            0xF0 => Opcode::Set_6_b,
            0xF1 => Opcode::Set_6_c,
            0xF2 => Opcode::Set_6_d,
            0xF3 => Opcode::Set_6_e,
            0xF4 => Opcode::Set_6_h,
            0xF5 => Opcode::Set_6_l,
            0xF6 => Opcode::Set_6_hl,
            0xF7 => Opcode::Set_6_a,
            0xF8 => Opcode::Set_7_b,
            0xF9 => Opcode::Set_7_c,
            0xFA => Opcode::Set_7_d,
            0xFB => Opcode::Set_7_e,
            0xFC => Opcode::Set_7_h,
            0xFD => Opcode::Set_7_l,
            0xFE => Opcode::Set_7_hl,
            0xFF => Opcode::Set_7_a,
            _ => {
                return Err((
                    format!("value not part of the instruction set: 0xCB {:x}", byte),
                    2,
                ))
            }
        };
        Ok((opcode, 2))
    }
}
